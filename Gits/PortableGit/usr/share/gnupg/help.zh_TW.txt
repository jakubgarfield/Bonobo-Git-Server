# help.zh_TW.txt - zh_TW GnuPG online help
# Copyright (C) 2007 Free Software Foundation, Inc.
#
# This file is part of GnuPG.
#
# GnuPG is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# GnuPG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <https://www.gnu.org/licenses/>.


.gpg.edit_ownertrust.value
在這裡指派的數值完全是看妳自己決定; 這些數值永遠不會被匯出給其他人.
我們需要它來實施信任網絡; 這跟 (自動建立起的) 憑證網絡一點關係也沒有.
.

.gpg.edit_ownertrust.set_ultimate.okay
要建立起信任網絡, GnuPG 需要知道哪些金鑰是被徹底信任的 -
那些金鑰通常就是妳有辦法存取到私鑰的. 回答 "yes" 來將這些
金鑰設成被徹底信任的

.

.gpg.untrusted_key.override
如果妳無論如何想要使用這把未被信任的金鑰, 請回答 "yes".
.

.gpg.pklist.user_id.enter
輸入妳要遞送的訊息接收者的使用者 ID.
.

.gpg.keygen.algo
請選擇要使用的演算法.

DSA (亦即 DSS) 是數位簽章演算法 (Digital Signature Algorithm),
祇能用於簽署.

Elgamal 是祇能用於加密的演算法.

RSA 可以被用來簽署及加密.

第一把 (主要的) 金鑰一定要含有能用於簽署的金鑰.
.

.gpg.keygen.algo.rsa_se
通常來說用同一把金鑰簽署及加密並不是個好主意.
這個演算法應該祇被用於特定的情況下.
請先聯絡妳的安全專家.
.

.gpg.keygen.size
請輸入金鑰的尺寸
.

.gpg.keygen.size.huge.okay
請回答 "yes" 或 "no"
.

.gpg.keygen.size.large.okay
請回答 "yes" 或 "no"
.

.gpg.keygen.valid
請輸入提示裡所要求的數值.
妳可以輸入 ISO 日期格式 (YYYY-MM-DD), 但是不會得到良好的錯誤回應 -
反之, 系統會試著把給定的數值中斷成若干片段.
.

.gpg.keygen.valid.okay
請回答 "yes" 或 "no"
.

.gpg.keygen.name
請輸入金鑰持有人的名字
.

.gpg.keygen.email
請輸入選用 (但強烈建議使用) 的電子郵件位址
.

.gpg.keygen.comment
請輸入選用的註釋
.

.gpg.keygen.userid.cmd
N  修改姓名.
C  修改註釋.
E  修改電子郵件位址.
O  繼續產生金鑰.
Q  中止產生金鑰.
.

.gpg.keygen.sub.okay
如果妳覺得產生子鑰可以的話, 就回答 "yes" (或者祇要 "y").
.

.gpg.sign_uid.okay
請回答 "yes" 或 "no"
.

.gpg.sign_uid.class
當妳在某把金鑰上簽署某個使用者 ID, 妳首先必須先驗證那把
金鑰確實屬於那個使用者 ID 上叫那個名字的人. 這對那些知道
妳多小心驗證的人來說很有用.

"0" 表示妳不能提出任何特別的主張來表明
    妳多仔細驗證那把金鑰

"1" 表示妳相信這把金鑰屬於那個主張是主人的人,
    但是妳不能或沒有驗證那把金鑰.
    這對那些祇想要 "個人的" 驗證的人來說很有用,
    因為妳簽署了一把擬似匿名使用者的金鑰.

"2" 表示妳真的仔細驗證了那把金鑰.
    例如說, 這能表示妳驗證了這把金鑰的指紋和
    使用者 ID, 並比對了照片 ID.

"3" 表示妳真的做了大規模的驗證金鑰工作.
    例如說, 這能表示妳向金鑰持有人驗證了金鑰指紋,
    而且妳透過附帶照片而難以偽造的文件 (像是護照)
    確認了金鑰持有人的姓名與金鑰上使用者 ID 的一致,
    最後妳還 (透過電子郵件往來) 驗證了金鑰上的
    電子郵件位址確實屬於金鑰持有人.

請注意上述關於等級 2 和 3 的例子 "祇是" 例子而已.
最後, 還是得由妳自己決定當妳簽署其他金鑰時,
甚麼是 "漫不經心", 而甚麼是 "超級謹慎".

如果妳不知道應該選甚麼答案的話, 就選 "0".
.

.gpg.change_passwd.empty.okay
請回答 "yes" 或 "no"
.

.gpg.keyedit.save.okay
請回答 "yes" 或 "no"
.

.gpg.keyedit.cancel.okay
請回答 "yes" 或 "no"
.

.gpg.keyedit.sign_all.okay
如果妳想要簽署 *所有* 使用者 ID 的話就回答 "yes"
.

.gpg.keyedit.remove.uid.okay
如果妳真的想要刪除這個使用者 ID 的話就回答 "yes".
所有的憑證在那之後也都會失去!
.

.gpg.keyedit.remove.subkey.okay
如果刪除這把子鑰沒問題的話就回答 "yes"
.

.gpg.keyedit.delsig.valid
這是一份在這把金鑰上有效的簽章; 通常妳不會想要刪除這份簽章,
因為要跟別的金鑰建立起信任連結, 或由這把金鑰所簽署的金鑰憑證
會是一件相當重要的事.
.

.gpg.keyedit.delsig.unknown
這份簽章無法被檢驗, 因為妳沒有符合的金鑰. 妳應該延緩刪除它,
直到妳知道哪一把金鑰被使用了; 因為這把來簽署的金鑰可能透過
其他已經驗證的金鑰建立了一個信任連結.
.

.gpg.keyedit.delsig.invalid
這份簽章無效. 把它從妳的鑰匙圈裡移去相當合理.
.

.gpg.keyedit.delsig.selfsig
這是一份和這個金鑰使用者 ID 相繫的簽章. 通常
把這樣的簽章移除不會是個好點子. 事實上 GnuPG
可能從此就不能再使用這把金鑰了. 所以祇有在這
把金鑰的第一個自我簽章因某些原因無效, 而第二
個還可用的情況下纔這麼做.
.

.gpg.keyedit.updpref.okay
變更所有 (或祇有被選取的那幾個) 使用者 ID 的偏好成現用的偏好清單.
所有受到影響的自我簽章的時間戳記都會增加一秒鐘.

.

.gpg.passphrase.enter
請輸入密語; 這是一個秘密的句子 

.

.gpg.passphrase.repeat
請再次輸入最後的密語, 以確定妳到底鍵進了些甚麼.
.

.gpg.detached_signature.filename
請給定簽章所要套用的檔案名稱
.

.gpg.openfile.overwrite.okay
如果覆寫這個檔案沒有問題的話就回答 "yes"
.

.gpg.openfile.askoutname
請輸入一個新的檔名. 如果妳直接按下了 Enter, 那麼
就會使用預設的檔案 (顯示在括號中).
.

.gpg.ask_revocation_reason.code
妳應該為這份憑證指定一個原因.
根據情境的不同, 妳應該可以從這個清單中選出一項:
  "金鑰已經被洩漏了"
      如果妳相信有某個未經許可的傢伙取得了妳的私鑰的話,
      就選這個.
  "金鑰被代換了"
      如果妳把妳的金鑰換成新的了, 就選這個.
  "金鑰不再被使用了"
      如果妳已經撤回了這把金鑰, 就選這個.
  "使用者 ID 不再有效了"
      如果這個使用者 ID 不再被使用了, 就選這個;
      這通常用來表示某個電子郵件位址不再有效了.

.

.gpg.ask_revocation_reason.text
妳也可以輸入一串文字來描述為甚麼發佈這份撤銷憑證的理由.
請讓這段文字保持簡明扼要.
鍵入空白列以結束這段文字.

.



# Local variables:
# mode: fundamental
# coding: utf-8
# End:
