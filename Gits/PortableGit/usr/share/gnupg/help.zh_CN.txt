# help.zh_CN.txt - zh_CN GnuPG online help
# Copyright (C) 2007 Free Software Foundation, Inc.
#
# This file is part of GnuPG.
#
# GnuPG is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# GnuPG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <https://www.gnu.org/licenses/>.


.gpg.edit_ownertrust.value
在这里指定的数值完全由您自己决定；这些数值永远不会被输出给任何第三方。
我们需要它来实现“信任网络”；这跟隐含建立起来的“验证网络”无关。
.

.gpg.edit_ownertrust.set_ultimate.okay
要建立起信任网络，GnuPG 需要知道哪些密钥是可绝对信任的――通常
就是您拥有私钥的那些密钥。回答“yes”将此密钥设成可绝对信任的

.

.gpg.untrusted_key.override
如果您无论如何要使用这把未被信任的密钥，请回答“yes”。
.

.gpg.pklist.user_id.enter
输入您要递送的报文的接收者的用户标识。
.

.gpg.keygen.algo
选择使用的算法。

DSA (也叫 DSS)即“数字签名算法”(美国国家标准)，只能够用作签名。

Elgamal 是一种只能用作加密的算法。

RSA 可以用作签名或加密。

第一把密钥(主钥)必须具有签名的能力。
.

.gpg.keygen.algo.rsa_se
通常来说用同一把密钥签名及加密并不是个好主意。这个算法只在特定的情况
下使用。请先咨询安全方面的专家。
.

.gpg.keygen.size
请输入密钥的尺寸
.

.gpg.keygen.size.huge.okay
请回答“yes”或“no”
.

.gpg.keygen.size.large.okay
请回答“yes”或“no”
.

.gpg.keygen.valid
请输入提示所要求的数值。
您可以输入 ISO 日期格式(YYYY-MM-DD)，但是出错时您不会得到友好的响应
――系统会尝试将给定值解释为时间间隔。
.

.gpg.keygen.valid.okay
请回答“yes”或“no”
.

.gpg.keygen.name
请输入密钥持有人的名字
.

.gpg.keygen.email
请输入电子邮件地址(可选项，但强烈推荐使用)
.

.gpg.keygen.comment
请输入注释(可选项)
.

.gpg.keygen.userid.cmd
N  修改姓名。
C  修改注释。
E  修改电子邮件地址。
O  继续产生密钥。
Q  中止产生密钥。
.

.gpg.keygen.sub.okay
如果您允许生成子钥，请回答“yes”(或者“y”)。
.

.gpg.sign_uid.okay
请回答“yes”或“no”
.

.gpg.sign_uid.class
当您为某把密钥上某个用户标识添加签名时，您必须首先验证这把密钥确实属于
署名于它的用户标识上的那个人。了解到您曾多么谨慎地对此进行过验证，对其
他人是非常有用的

“0” 表示您对您有多么仔细地验证这把密钥的问题不表态。

“1” 表示您相信这把密钥属于那个声明是主人的人，但是您不能或根本没有验
      证过。如果您为一把属于类似虚拟人物的密钥签名，这个选择很有用。

“2” 表示您随意地验证了那把密钥。例如，您验证了这把密钥的指纹，或比对
      照片验证了用户标识。

“3” 表示您做了大量而详尽的验证密钥工作。例如，您同密钥持有人验证了密
      钥指纹，而且通过查验附带照片而难以伪造的证件(如护照)确认了密钥持
      有人的姓名与密钥上的用户标识一致，最后您还(通过电子邮件往来)验证
      了密钥上的电子邮件地址确实属于密钥持有人。

请注意上述关于验证级别 2 和 3 的说明仅是例子而已。最终还是由您自己决定
当您为其他密钥签名时，什么是“随意”，而什么是“大量而详尽”。

如果您不知道应该选什么答案的话，就选“0”。
.

.gpg.change_passwd.empty.okay
请回答“yes”或“no”
.

.gpg.keyedit.save.okay
请回答“yes”或“no”
.

.gpg.keyedit.cancel.okay
请回答“yes”或“no”
.

.gpg.keyedit.sign_all.okay
如果您想要为所有用户标识签名的话就选“yes”
.

.gpg.keyedit.remove.uid.okay
如果您真的想要删除这个用户标识的话就回答“yes”。
所有相关认证在此之后也会丢失！
.

.gpg.keyedit.remove.subkey.okay
如果可以删除这把子钥，请回答“yes”
.

.gpg.keyedit.delsig.valid
这是一份在这把密钥上有效的签名；通常您不会想要删除这份签名，
因为要与这把密钥或拥有这把密钥的签名的密钥建立认证关系可能
相当重要。
.

.gpg.keyedit.delsig.unknown
这份签名无法被检验，因为您没有相应的密钥。您应该暂缓删除它，
直到您知道此签名使用了哪一把密钥；因为用来签名的密钥可能与
其他已经验证的密钥存在信任关系。
.

.gpg.keyedit.delsig.invalid
这份签名无效。应当把它从您的钥匙环里删除。
.

.gpg.keyedit.delsig.selfsig
这是一份将密钥与用户标识相联系的签名。通常不应删除这样的签名。
事实上，一旦删除，GnuPG可能从此就不能再使用这把密钥了。因此，
只有在这把密钥的第一个自身签名因某些原因失效，而有第二个自身签
字可用的情况下才这么做。
.

.gpg.keyedit.updpref.okay
用现有的首选项更新所有(或选定的)用户标识的首选项。所有受影响的自身签
字的时间戳都会增加一秒钟。

.

.gpg.passphrase.enter
请输入密码：这是一个秘密的句子 

.

.gpg.passphrase.repeat
请再次输入上次的密码，以确定您到底键入了些什么。
.

.gpg.detached_signature.filename
请给定要添加签名的文件名
.

.gpg.openfile.overwrite.okay
如果可以覆盖这个文件，请回答“yes”
.

.gpg.openfile.askoutname
请输入一个新的文件名。如果您直接按下了回车，那么就会使用显示在括
号中的默认的文件名。
.

.gpg.ask_revocation_reason.code
您应该为这份吊销证书指定一个原因。根据情境的不同，您可以从下列清单中
选出一项：
  “密钥已泄漏”
      如果您相信有某个未经许可的人已取得了您的私钥，请选此项。
  “密钥已替换”
      如果您已用一把新密钥代替旧的，请选此项。
  “密钥不再被使用”
      如果您已决定让这把密钥退休，请选此项
  “用户标识不再有效”
      如果这个用户标识不再被使用了，请选此项；这通常用表明某个电子邮
      件地址已不再有效。

.

.gpg.ask_revocation_reason.text
您也可以输入一串文字，描述发布这份吊销证书的理由。请尽量使这段文
字简明扼要。
键入一空行以结束输入。

.



# Local variables:
# mode: fundamental
# coding: utf-8
# End:
